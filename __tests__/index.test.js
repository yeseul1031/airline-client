import React from 'react';
import ReactDOM from 'react-dom';
import {
  cleanup,
  fireEvent,
  render,
  waitFor,
  waitForElementToBeRemoved,
} from '@testing-library/react';
import { act } from '@testing-library/react';

import '@testing-library/jest-dom/extend-expect';
import Search from '../pages/component/Search';
import Main from '../pages/Main';
import { resq$ } from 'resq';
import * as Api from '../api/FlightDataApi';
import nock from 'nock';
import { readFileSync } from 'fs';

console.error = (msg) => {
  if (
    msg
      .toString()
      .includes(
        'Warning: An update to Main inside a test was not wrapped in act'
      )
  ) {
    return () => {};
  } else return console.error;
};

afterEach(cleanup);

describe('üí° Part 1: Ìï≠Í≥µÍ∂å Î™©Î°ù ÌïÑÌÑ∞ÎßÅ', () => {
  describe('üß© Main Ïª¥Ìè¨ÎÑåÌä∏ÏóêÏÑú Ìï≠Í≥µÌé∏ÏùÑ Ï°∞ÌöåÌï©ÎãàÎã§', () => {
    test('Main Ïª¥Ìè¨ÎÑåÌä∏ ÎÇ¥ `search` Ìï®ÏàòÎäî Í≤ÄÏÉâ Ï°∞Í±¥ÏùÑ Îã¥Í≥† ÏûàÎäî ÏÉÅÌÉú Í∞ùÏ≤¥ `condition`ÏùÑ ÏóÖÎç∞Ïù¥Ìä∏Ìï¥Ïïº Ìï©ÎãàÎã§', async () => {
      const { getByTestId, container } = render(<Main />);

      await act(async () => {
        global.search({ departure: 'ICN', destination: 'CJU' });
      });

      const element = getByTestId('condition');
      expect(element.textContent).toBe(
        '{"departure":"ICN","destination":"CJU"}'
      );
    });
  });

  describe('üß© Search Ïª¥Ìè¨ÎÑåÌä∏Î•º ÌÜµÌï¥ ÏÉÅÌÉú ÎÅåÏñ¥Ïò¨Î¶¨Í∏∞Î•º ÌïôÏäµÌï©ÎãàÎã§', () => {
    const container = document.createElement('div');

    afterEach(() => {
      cleanup();
    });

    test('Í≤ÄÏÉâ ÌôîÎ©¥Ïù¥ Search Ïª¥Ìè¨ÎÑåÌä∏Î°ú Î∂ÑÎ¶¨ÎêòÏñ¥Ïïº Ìï©ÎãàÎã§', () => {
      const { container } = render(<Search />);
      expect(container.querySelector('#input-departure')).not.toBeNull();
      expect(container.querySelector('#input-destination')).not.toBeNull();
      expect(container.querySelector('#search-btn')).not.toBeNull();
    });

    test('Search Ïª¥Ìè¨ÎÑåÌä∏ÏóêÎäî ÏÉÅÌÉú Î≥ÄÍ≤Ω Ìï®Ïàò `search`Í∞Ä `onSearch` propsÎ°ú Ï†ÑÎã¨ÎêòÏñ¥Ïïº Ìï©ÎãàÎã§', () => {
      const { container } = render(<Main />);
      const onSearch = resq$('Search', container).props.onSearch;

      expect(typeof onSearch).toBe('function');
      expect(onSearch.name).toBe('search');
    });

    test('ÏÉÅÌÉú Î≥ÄÍ≤Ω Ìï®Ïàò `search`Îäî Search Ïª¥Ìè¨ÎÑåÌä∏Ïùò `Í≤ÄÏÉâ` Î≤ÑÌäº ÌÅ¥Î¶≠ Ïãú Ïã§ÌñâÎêòÏñ¥Ïïº Ìï©ÎãàÎã§', () => {
      const searchFn = jest.fn();
      const { getByRole } = render(<Search onSearch={searchFn} />, {
        container,
      });
      const btn = getByRole('button', { name: 'Í≤ÄÏÉâ' });
      fireEvent.click(btn);

      expect(searchFn).toHaveBeenCalled();
    });
  });
});



describe('üí° Part 2: AJAX ÏöîÏ≤≠', () => {
 describe('üß© Side EffectÎäî useEffectÏóêÏÑú Îã§Î§ÑÏïº Ìï©ÎãàÎã§', () => {
  test('Í≤ÄÏÉâ Ï°∞Í±¥Ïù¥ Î∞îÎÄî ÎïåÎßàÎã§, FlightDataApiÏùò getFlightÎ•º Í≤ÄÏÉâ Ï°∞Í±¥Í≥º Ìï®Íªò ÏöîÏ≤≠Ìï¥Ïïº Ìï©ÎãàÎã§', async () => {
      const getFlightSpy = jest.spyOn(Api, 'getFlight').mockResolvedValue([]);

      const { getByRole, container } = render(<Main />);
     const btn = getByRole('button', { name: 'Í≤ÄÏÉâ' });
     const input = container.querySelector('#input-destination');

       fireEvent.change(input, { target: { value: 'CJU' } });
       fireEvent.click(btn);

      await waitFor(() => {
        expect(getFlightSpy).toHaveBeenCalledWith({
           departure: 'ICN',
          destination: 'CJU',
         });
       });

       getFlightSpy.mockRestore();
     });

     test('getFlightÏùò Í≤∞Í≥ºÎ•º Î∞õÏïÑ, flightList ÏÉÅÌÉúÎ•º ÏóÖÎç∞Ïù¥Ìä∏Ìï¥Ïïº Ìï©ÎãàÎã§', async () => {
       const { getByRole, queryAllByText, container } = render(<Main />);
       const btn = getByRole('button', { name: 'Í≤ÄÏÉâ' });
      const input = container.querySelector('#input-destination');

       fireEvent.change(input, { target: { value: 'CJU' } });
       fireEvent.click(btn);

       await waitFor(() => {
         expect(queryAllByText('üõ¨ CJU').length).toBe(5); // ÎèÑÏ∞©ÏßÄÍ∞Ä CJUÏù¥Î©¥, Í≤∞Í≥ºÍ∞Ä Îã§ÏÑØÍ∞úÏûÖÎãàÎã§

         // Îã§Î•∏ ÎèÑÏ∞©ÏßÄÎäî ÌôîÎ©¥Ïóê ÌëúÏãúÎêòÏßÄ ÏïäÏäµÎãàÎã§
         expect(queryAllByText('üõ¨ BKK').length).toBe(0);
         expect(queryAllByText('üõ¨ PUS').length).toBe(0);
       });
    });

     test('ÎçîÏù¥ÏÉÅ, Ïª¥Ìè¨ÎÑåÌä∏ ÎÇ¥ ÌïÑÌÑ∞ Ìï®Ïàò `filterByCondition`Î•º ÏÇ¨Ïö©ÌïòÏßÄ ÏïäÏäµÎãàÎã§', () => {
       // HINT: Ï£ºÏÑù Ï≤òÎ¶¨ÌïòÏßÄ ÎßêÍ≥†, Ìï¥Îãπ ÎÇ¥Ïö©ÏùÑ ÏßÄÏõåÏïº ÌÖåÏä§Ìä∏Ïóê ÌÜµÍ≥ºÌï©ÎãàÎã§
       expect(Main.toString().includes('filterByCondition')).toBe(false);
     });

     test('ÎçîÏù¥ÏÉÅ, ÌïòÎìúÏΩîÎî©Îêú flightList JSONÏùÑ ÏÇ¨Ïö©ÌïòÏßÄ ÏïäÏäµÎãàÎã§ (Ï¥àÍ∏∞Í∞íÏùÄ Îπà Î∞∞Ïó¥Î°ú Îë°ÎãàÎã§)', () => {
       // HINT: Ï£ºÏÑù Ï≤òÎ¶¨ÌïòÏßÄ ÎßêÍ≥†, Ìï¥Îãπ ÎÇ¥Ïö©ÏùÑ ÏßÄÏõåÏïº ÌÖåÏä§Ìä∏Ïóê ÌÜµÍ≥ºÌï©ÎãàÎã§
       const file = readFileSync(__dirname + '/../pages/index.js').toString();
      expect(file.includes("import json from '../resource/flightList'")).toBe(
         false
       );
     });

     test('getFlight ÏöîÏ≤≠Ïù¥ Îã§ÏÜå ÎäêÎ¶¨ÎØÄÎ°ú, Î°úÎî© ÏÉÅÌÉúÏóê Îî∞Îùº LoadingIndicator Ïª¥Ìè¨ÎÑåÌä∏Î•º ÌëúÏãúÌï¥Ïïº Ìï©ÎãàÎã§', async () => {
       const { getByRole, getByAltText, container } = render(<Main />);
      const btn = getByRole('button', { name: 'Í≤ÄÏÉâ' });
       const input = container.querySelector('#input-destination');

       fireEvent.change(input, { target: { value: 'CJU' } });
       fireEvent.click(btn);

      expect(getByAltText('now loading...')).not.toBeNull();
       await waitForElementToBeRemoved(() => getByAltText('now loading...'));
     });
   });

   describe('üß© FlightDataApiÏóêÏÑú Í∏∞Ï°¥ Íµ¨ÌòÑ ÎåÄÏã†, REST APIÎ•º Ìò∏Ï∂úÌïòÎèÑÎ°ù Î∞îÍøâÎãàÎã§', () => {
    test('Í≤ÄÏÉâ Ï°∞Í±¥Í≥º Ìï®Íªò Airline ÏÑúÎ≤ÑÏóêÏÑú Ìï≠Í≥µÌé∏ Ï†ïÎ≥¥Î•º ÏöîÏ≤≠(fetch)Ìï©ÎãàÎã§', (done) => {
       const result = [
         {
         uuid: 'af6fa55c-da65-47dd-af23-578fdba40bod',
          departure: 'ICN',
           destination: 'CJU',
           departure_times: '2024-12-02T12:00:00',
          arrival_times: '2024-12-03T12:00:00',
        },
       ];

      const scope = nock('http://localhost:4999')
         .persist()
        .get('/flight')
        .reply(200, result);

       Api.getFlight({ departure: 'ICN', destination: 'CJU' }).then((json) => {
       expect(json).toEqual(result);
        const ajaxCallCount = scope.interceptors[0].interceptionCounter;
        expect(ajaxCallCount).toEqual(1); // ajax callÏù¥ 1Ìöå Î∞úÏÉù
        expect(scope.interceptors[0].statusCode).toEqual(200);
        done();
       });
     });
   });
});
